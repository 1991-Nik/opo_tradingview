!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).Brokers={})}(this,(function(t){"use strict";const e=[{label:"Symbol",formatter:"symbol",id:"symbol",dataFields:["symbol","symbol","message"]},{label:"Side",id:"side",dataFields:["side"],formatter:"side"},{label:"Type",id:"type",dataFields:["type","parentId","stopType"],formatter:"type"},{label:"Qty",alignment:"right",id:"qty",dataFields:["qty"],help:"Size in lots"},{label:"Limit Price",alignment:"right",id:"limitPrice",dataFields:["limitPrice"],formatter:"formatPrice"},{label:"Stop Price",alignment:"right",id:"stopPrice",dataFields:["stopPrice"],formatter:"formatPrice"},{label:"Last",alignment:"right",id:"last",dataFields:["last"],formatter:"formatPriceForexSup",highlightDiff:!0},{label:"Execution",id:"execution",dataFields:["execution"]},{label:"Status",id:"status",dataFields:["status"],formatter:"status",supportedStatusFilters:[0]},{label:"Order id",id:"id",dataFields:["id"]}],i=[{label:"Symbol",formatter:"symbol",id:"symbol",dataFields:["symbol","symbol","message"]},{label:"Side",id:"side",dataFields:["side"],formatter:"side"},{label:"Qty",alignment:"right",id:"qty",dataFields:["qty"],help:"Size in lots"},{label:"Avg Fill Price",alignment:"right",id:"avgPrice",dataFields:["avgPrice"],formatter:"formatPrice"},{label:"Last",alignment:"right",id:"last",dataFields:["last"],formatter:"formatPriceForexSup",highlightDiff:!0},{label:"Profit",alignment:"right",id:"pl",dataFields:["pl"],formatter:"profit"},{label:"Stop Loss",alignment:"right",id:"stopLoss",dataFields:["stopLoss"]},{label:"Take Profit",alignment:"right",id:"takeProfit",dataFields:["takeProfit"]}],s=[{label:"Title",notSortable:!0,id:"title",dataFields:["title"],formatter:"custom_uppercase"},{label:"Balance",alignment:"right",id:"balance",dataFields:["balance"],formatter:"fixed"},{label:"Open PL",alignment:"right",id:"pl",dataFields:["pl"],formatter:"profit",notSortable:!0},{label:"Equity",alignment:"right",id:"equity",dataFields:["equity"],formatter:"fixed",notSortable:!0}],a=[3,6];function r(t){return 1===t?-1:1}function o(t){return`SampleBroker-${t}`}t.BrokerSample=class{constructor(t,e){this._accountManagerData={title:"Trading Sample",balance:1e7,equity:1e7,pl:0},this._positionById={},this._positions=[],this._orderById={},this._executions=[],this._idsCounter=1,this._handleEquityUpdate=t=>{this._host.equityUpdate(t)},this._quotesProvider=e,this._host=t,this._amChangeDelegate=this._host.factory.createDelegate(),this._balanceValue=this._host.factory.createWatchedValue(this._accountManagerData.balance),this._equityValue=this._host.factory.createWatchedValue(this._accountManagerData.equity),this._amChangeDelegate.subscribe(null,(t=>{this._balanceValue.setValue(t.balance),this._equityValue.setValue(t.equity)}))}subscribeEquity(){this._equityValue.subscribe(this._handleEquityUpdate,{callWithLast:!0})}unsubscribeEquity(){this._equityValue.unsubscribe(this._handleEquityUpdate)}connectionStatus(){return 1}chartContextMenuActions(t,e){return this._host.defaultContextMenuActions(t)}isTradable(t){return Promise.resolve(!0)}async placeOrder(t){if(t.duration&&console.log("Durations are not implemented in this sample."),this._host.activateBottomWidget(),(2===t.type||void 0===t.type)&&this._getBrackets(t.symbol).length>0)return this._updateOrder(this._createOrder(t)),{};return this._createOrderWithBrackets(t).forEach((t=>{this._updateOrder(t)})),{}}async modifyOrder(t){if(void 0===this._orderById[t.id])return;if(this._updateOrder(t),void 0!==t.parentId)return;const e=this._getTakeProfitBracket(t),i=this._getStopLossBracket(t);this._updateOrdersBracket({parent:t,bracket:e,newPrice:t.takeProfit,bracketType:1}),this._updateOrdersBracket({parent:t,bracket:i,newPrice:t.stopLoss,bracketType:0})}async editPositionBrackets(t,e){var i,s;const a=this._positionById[t],r=this._getBrackets(t),o={...a};null!==(i=o.takeProfit)&&void 0!==i||(o.takeProfit=e.takeProfit),null!==(s=o.stopLoss)&&void 0!==s||(o.stopLoss=e.stopLoss),this._updatePosition(o);const d=r.find((t=>void 0!==t.limitPrice)),n=r.find((t=>void 0!==t.stopPrice));this._updatePositionsBracket({parent:o,bracket:d,bracketType:1,newPrice:e.takeProfit}),this._updatePositionsBracket({parent:o,bracket:n,bracketType:0,newPrice:e.stopLoss})}async closePosition(t){const e=this._positionById[t];await(()=>{this.placeOrder({symbol:e.symbol,side:-1===e.side?1:-1,type:2,qty:e.qty})})()}async orders(){return this._orders()}positions(){return Promise.resolve(this._positions.slice())}executions(t){return Promise.resolve(this._executions.filter((e=>e.symbol===t)))}async reversePosition(t){const e=this._positionById[t];await(()=>this.placeOrder({symbol:e.symbol,side:-1===e.side?1:-1,type:2,qty:2*e.qty}))()}cancelOrder(t){const e=this._orderById[t];return(()=>(e.status=1,this._updateOrder(e),this._getBrackets(e.id).forEach((t=>this.cancelOrder(t.id))),Promise.resolve()))()}cancelOrders(t,e,i){return(()=>Promise.all(i.map((t=>this.cancelOrder(t)))).then((()=>{})))()}accountManagerInfo(){return{accountTitle:"Trading Sample",summary:[{text:"Balance",wValue:this._balanceValue,formatter:"fixed",isDefault:!0},{text:"Equity",wValue:this._equityValue,formatter:"fixed",isDefault:!0}],orderColumns:e,positionColumns:i,pages:[{id:"accountsummary",title:"Account Summary",tables:[{id:"accountsummary",columns:s,getData:()=>Promise.resolve([this._accountManagerData]),initialSorting:{property:"balance",asc:!1},changeDelegate:this._amChangeDelegate}]}],contextMenuActions:(t,e)=>Promise.resolve(this._bottomContextMenuItems(e))}}async symbolInfo(t){const e=await this._host.getSymbolMinTick(t);return{qty:{min:1,max:1e12,step:1},pipValue:1*e*1||1,pipSize:e,minTick:e,description:""}}currentAccount(){return"1"}async accountsMetainfo(){return[{id:"1",name:"Test account"}]}_bottomContextMenuItems(t){const e={separator:!0},i=this._host.sellBuyButtonsVisibility();return t.length&&t.push(e),t.concat([{text:"Show Buy/Sell Buttons",action:()=>{i&&i.setValue(!i.value())},checkable:!0,checked:null!==i&&i.value()},{text:"Trading Settings...",action:()=>{this._host.showTradingProperties()}}])}_createPositionForOrder(t){const e=t.symbol;let i=this._positionById[e];const s=t.side,a=t.qty,o=void 0!==t.parentId;if(t.avgPrice=t.price,i){const e=t.side===i.side?1:-1;if(e>0)i.avgPrice=(i.qty*i.avgPrice+t.qty*t.price)/(i.qty+t.qty);else{i.avgPrice=i.avgPrice;const e=Math.min(a,i.qty);this._accountManagerData.balance+=(t.price-i.avgPrice)*e*(-1===i.side?-1:1)}i.qty=i.qty+t.qty*e;const s=this._getBrackets(i.id);i.qty<=0?(s.forEach((t=>{o?this._setFilledStatusAndUpdate(t):this._setCanceledStatusAndUpdate(t)})),i.side=r(i.side),i.qty*=-1):s.forEach((t=>{t.side=r(i.side),t.qty=i.qty,this._updateOrder(t)}))}else i={...t,id:e,avgPrice:t.price};const d={id:""+this._idsCounter++,brokerSymbol:t.brokerSymbol,price:t.price,qty:a,side:s,symbol:t.symbol,time:Date.now()};return this._executions.push(d),this._host.executionUpdate(d),this._updatePosition(i),this._recalculateAMData(),this._host.plUpdate(i.symbol,i.profit),this._host.positionPartialUpdate(i.id,i),this._recalculateAMData(),i}_updateOrderLast(t){this._host.orderPartialUpdate(t.id,{last:t.last})}_orders(){return Object.values(this._orderById)}_updateOrder(t){const e={[-1]:{2:()=>!!t.price,1:()=>void 0!==t.limitPrice&&t.last>=t.limitPrice,3:()=>void 0!==t.stopPrice&&t.last<=t.stopPrice,4:()=>!1},1:{2:()=>!!t.price,1:()=>void 0!==t.limitPrice&&t.last<=t.limitPrice,3:()=>void 0!==t.stopPrice&&t.last>=t.stopPrice,4:()=>!1}},i=Boolean(this._orderById[t.id]);if(this._orderById[t.id]=t,Object.assign(this._orderById[t.id],t),i||this._subscribeData(t.symbol,t.id,(i=>{if(t.last!==i){if(t.last=i,null==t.price&&(t.price=t.last),6===t.status&&e[t.side][t.type]()){const e={...t};t.price=t.last,t.avgPrice=t.last;const i=this._createPositionForOrder(e);t.status=2,this._updateOrder(t),this._getBrackets(t.id).forEach((t=>{t.status=6,t.parentId=i.id,t.parentType=2,this._updateOrder(t)}))}this._updateOrderLast(t)}})),this._host.orderUpdate(t),void 0!==t.parentId){const e=2===t.parentType?this._positionById[t.parentId]:this._orderById[t.parentId];if(void 0===e)return;if(void 0!==t.limitPrice&&(e.takeProfit=1!==t.status?t.limitPrice:void 0),void 0!==t.stopPrice&&(e.stopLoss=1!==t.status?t.stopPrice:void 0),2===t.parentType)return this._updatePosition(e);this._updateOrder(e)}}_updatePosition(t){const e=Boolean(this._positionById[t.id]);if(e&&!t.qty){this._unsubscribeData(t.id);const e=this._positions.indexOf(t);return-1!==e&&this._positions.splice(e,1),delete this._positionById[t.id],void this._host.positionUpdate(t)}e||(this._positions.push(t),this._subscribeData(t.symbol,t.id,(e=>{t.last!==e&&(t.last=e,t.profit=(t.last-t.price)*t.qty*(-1===t.side?-1:1),this._host.plUpdate(t.symbol,t.profit),this._host.positionPartialUpdate(t.id,t),this._recalculateAMData())}))),this._positionById[t.id]=t,this._host.positionUpdate(t)}_subscribeData(t,e,i){this._quotesProvider.subscribeQuotes([],[t],(t=>{const e=t[0];"ok"===e.s&&"number"==typeof e.v.lp&&i(e.v.lp)}),o(e))}_unsubscribeData(t){this._quotesProvider.unsubscribeQuotes(o(t))}_recalculateAMData(){let t=0;this._positions.forEach((e=>{t+=e.profit||0})),this._accountManagerData.pl=t,this._accountManagerData.equity=this._accountManagerData.balance+t,this._amChangeDelegate.fire(this._accountManagerData)}_createOrderWithBrackets(t){const e=[],i=this._createOrder(t);if(e.push(i),void 0!==i.takeProfit){const t=this._createTakeProfitBracket(i);e.push(t)}if(void 0!==i.stopLoss){const t=this._createStopLossBracket(i);e.push(t)}return e}_getBrackets(t){return this._orders().filter((e=>e.parentId===t&&a.includes(e.status)))}_createOrder(t){return{id:""+this._idsCounter++,duration:t.duration,limitPrice:t.limitPrice,profit:0,qty:t.qty,side:t.side||1,status:6,stopPrice:t.stopPrice,symbol:t.symbol,type:t.type||2,takeProfit:t.takeProfit,stopLoss:t.stopLoss}}_createTakeProfitBracket(t){return{symbol:t.symbol,qty:t.qty,id:""+this._idsCounter++,parentId:t.id,parentType:1,limitPrice:t.takeProfit,side:r(t.side),status:3,type:1}}_createStopLossBracket(t){return{symbol:t.symbol,qty:t.qty,id:""+this._idsCounter++,parentId:t.id,parentType:1,stopPrice:t.stopLoss,price:t.stopPrice,side:r(t.side),status:3,type:3}}_getTakeProfitBracket(t){return this._getBrackets(t.id).find((t=>void 0!==t.limitPrice))}_getStopLossBracket(t){return this._getBrackets(t.id).find((t=>void 0!==t.stopPrice))}_updateOrdersBracket(t){const{parent:e,bracket:i,bracketType:s,newPrice:a}=t;if(void 0!==i&&void 0===a)return void this._setCanceledStatusAndUpdate(i);if(void 0===a)return;const r=void 0===i;if(1!==s)if(0!==s);else{const t=r?this._createStopLossBracket(e):{...i,stopPrice:a};this._updateOrder(t)}else{const t=r?this._createTakeProfitBracket(e):{...i,limitPrice:a};this._updateOrder(t)}}_updatePositionsBracket(t){const{parent:e,bracket:i,bracketType:s,newPrice:a}=t;if(void 0!==i&&void 0===a)return void this._setCanceledStatusAndUpdate(i);if(void 0===a)return;const r=void 0===i;if(1===s){if(r){const t=this._createTakeProfitBracket(e);return t.status=6,t.parentType=2,void this._updateOrder(t)}return i.limitPrice=a,i.takeProfit=a,void this._updateOrder(i)}if(0===s){if(r){const t=this._createStopLossBracket(e);return t.status=6,t.parentType=2,void this._updateOrder(t)}return i.stopPrice=a,i.stopLoss=a,void this._updateOrder(i)}}_setCanceledStatusAndUpdate(t){t.status=1,this._updateOrder(t)}_setFilledStatusAndUpdate(t){t.status=2,this._updateOrder(t)}},Object.defineProperty(t,"__esModule",{value:!0})}));
